<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\KEIL\out\I2Cn_MasterSlave.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\KEIL\out\I2Cn_MasterSlave.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Oct 25 09:11:44 2020
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; proc &rArr; WaitTick &rArr; wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">EINT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">EINT0_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_Handler</a> from adc.o(i.ADC_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[f]">EINT0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[10]">EINT1_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[11]">EINT2_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[12]">EINT3_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[16]">I2C0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1a]">I2C1_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[25]">I2C2_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[c]">LVI_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from proc.o(RAMFUNC) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_a31g12x.o(i.SystemInit) referenced from startup_a31g12x.o(.text)
 <LI><a href="#[13]">TIMER10_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[14]">TIMER11_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[15]">TIMER12_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[21]">TIMER13_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[22]">TIMER14_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[23]">TIMER15_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[24]">TIMER16_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1b]">TIMER20_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1c]">TIMER21_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[19]">TIMER30_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1f]">UART0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[20]">UART1_Handler</a> from uart_a31g12x.o(i.UART1_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[17]">USART10_Handler</a> from uart1n_a31g12x.o(i.USART10_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1d]">USART11_Handler</a> from uart1n_a31g12x.o(i.USART11_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[26]">USART12_Handler</a> from uart1n_a31g12x.o(i.USART12_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[27]">USART13_Handler</a> from uart1n_a31g12x.o(i.USART13_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[e]">WDT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[18]">WT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[d]">WUT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[2c]">__main</a> from __main.o(!!!main) referenced from startup_a31g12x.o(.text)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2a]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[31]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[32]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[37]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[34]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[38]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; proc &rArr; WaitTick &rArr; wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EINT0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EINT1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER16_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER20_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER30_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WUT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3f]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetData
</UL>

<P><STRONG><a name="[46]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[47]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[33]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[43]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[83]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendStr
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcTmrInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_divisors
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[40]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[35]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, proc.o(RAMFUNC))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC_ChannelSel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_adc.o(i.ADC_ChannelSel))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[50]"></a>ADC_ClearStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, a31g12x_adc.o(i.ADC_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[4c]"></a>ADC_GetData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g12x_adc.o(i.ADC_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[1e]"></a>ADC_Handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc.o(i.ADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ADC_Handler &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetData
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelSel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdccTrgigerSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, a31g12x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk2
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[59]"></a>ADC_IntConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_adc.o(i.ADC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[51]"></a>ADC_StartCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, a31g12x_adc.o(i.ADC_StartCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[4e]"></a>AdcGetData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, proc.o(i.AdcGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[54]"></a>AdcInit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, adc.o(i.AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AdcInit &rArr; AdcTmrInit &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcTmrInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[5c]"></a>AdcStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.AdcStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcStart
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Cmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdccTrgigerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[5b]"></a>AdcTmrInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc.o(i.AdcTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcTmrInit &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[4d]"></a>AdccTrgigerSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.AdccTrgigerSet))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[5a]"></a>EInt_MaskDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g12x_intc.o(i.EInt_MaskDisable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[96]"></a>GPIO_ReadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a31g12x_pcu.o(i.GPIO_ReadValue))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[5f]"></a>HostSendAdc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, proc.o(i.HostSendAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HostSendAdc &rArr; UartSendBytes &rArr; _UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[61]"></a>Init_Clock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.Init_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Clock &rArr; SCUCG_SetMonClk
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetMonClk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkoCtrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkDiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_EnClkSrc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_ChangeSysClk
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Init_Port</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.Init_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetPeriClk
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>PCU_ConfigureFunction</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, a31g12x_pcu.o(i.PCU_ConfigureFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn13InitPort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn11InitPort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn10InitPort
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1InitPort
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[57]"></a>PCU_ConfigurePullupdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a31g12x_pcu.o(i.PCU_ConfigurePullupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCU_ConfigurePullupdown
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn13InitPort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn11InitPort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn10InitPort
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1InitPort
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[56]"></a>PCU_SetDirection</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, a31g12x_pcu.o(i.PCU_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCU_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn13InitPort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn11InitPort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn10InitPort
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1InitPort
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[63]"></a>SCUCG_ChangeSysClk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_ChangeSysClk))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[62]"></a>SCUCG_EnClkSrc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, a31g12x_scucg.o(i.SCUCG_EnClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCUCG_EnClkSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[77]"></a>SCUCG_RstEachPeri2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_RstEachPeri2))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[64]"></a>SCUCG_SetClkDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[67]"></a>SCUCG_SetClkoCtrl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkoCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[66]"></a>SCUCG_SetClkoPin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkoPin))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[6a]"></a>SCUCG_SetEachPeriClk1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetEachPeriClk1))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Init
</UL>

<P><STRONG><a name="[53]"></a>SCUCG_SetEachPeriClk2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetEachPeriClk2))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[65]"></a>SCUCG_SetMonClk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, a31g12x_scucg.o(i.SCUCG_SetMonClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCUCG_SetMonClk
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[69]"></a>SCUCG_SetPeriClk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetPeriClk))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Port
</UL>

<P><STRONG><a name="[95]"></a>SetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, proc.o(i.SetTick))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_a31g12x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>TIMER1n_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_timer1n.o(i.TIMER1n_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStart
</UL>

<P><STRONG><a name="[5e]"></a>TIMER1n_Init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, a31g12x_timer1n.o(i.TIMER1n_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcTmrInit
</UL>

<P><STRONG><a name="[20]"></a>UART1_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart_a31g12x.o(i.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_Handler &rArr; UARTn_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntTransmit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART1_IntReceive</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_a31g12x.o(i.UART1_IntReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IntReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[6e]"></a>UARTn_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, a31g12x_uartn.o(i.UARTn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTn_Init &rArr; uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
</UL>

<P><STRONG><a name="[71]"></a>UARTn_IntConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, a31g12x_uartn.o(i.UARTn_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UartSendByte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntTransmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
</UL>

<P><STRONG><a name="[6b]"></a>UARTn_IntTransmit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UARTn_IntTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTn_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_SendByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[6d]"></a>UARTn_ReceiveByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a31g12x_uartn.o(i.UARTn_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
</UL>

<P><STRONG><a name="[70]"></a>UARTn_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, a31g12x_uartn.o(i.UARTn_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntTransmit
</UL>

<P><STRONG><a name="[17]"></a>USART10_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART10_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART11_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART11_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART12_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART12_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USART13_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART13_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USART1n_ClearStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[89]"></a>USART1n_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[73]"></a>USART1n_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[72]"></a>USART1n_Handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.USART1n_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1n_Handler &rArr; UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_GetStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART13_Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART12_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART11_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_Handler
</UL>

<P><STRONG><a name="[76]"></a>USART1n_Init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, a31g12x_usart1n.o(i.USART1n_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1n_Init &rArr; usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_RstEachPeri2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_divisors
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[7c]"></a>USART1n_IntConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendBytes
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetChar
</UL>

<P><STRONG><a name="[7a]"></a>USART1n_ReceiveByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntReceive
</UL>

<P><STRONG><a name="[7b]"></a>USART1n_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
</UL>

<P><STRONG><a name="[86]"></a>USART1n_UART_Mode_ConfigStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_UART_Mode_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[74]"></a>UST_IntReceive</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.UST_IntReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UST_IntReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[75]"></a>UST_IntTransmit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UST_IntTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UST_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_SendByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[7d]"></a>Uart1InitPort</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_a31g12x.o(i.Uart1InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart1InitPort &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[7e]"></a>UartGetChar</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UartGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
</UL>

<P><STRONG><a name="[93]"></a>UartInitBuff</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UartInitBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartInitBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[7f]"></a>UartOpen</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uart_a31g12x.o(i.UartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartOpen &rArr; UARTn_Init &rArr; uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[80]"></a>UartSendByte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartSendByte &rArr; UartSendBytes &rArr; _UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
</UL>

<P><STRONG><a name="[60]"></a>UartSendBytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart_a31g12x.o(i.UartSendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartSendBytes &rArr; _UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UartSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendStr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSendAdc
</UL>

<P><STRONG><a name="[82]"></a>UartSendStr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UartSendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartSendStr &rArr; UartSendBytes &rArr; _UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBytes
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[84]"></a>UsartGetChar</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UsartGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
</UL>

<P><STRONG><a name="[94]"></a>UsartInitBuff</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, uart1n_a31g12x.o(i.UsartInitBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UsartInitBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[85]"></a>UsartOpen</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart1n_a31g12x.o(i.UsartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsartOpen &rArr; USART1n_Init &rArr; usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_UART_Mode_ConfigStructInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[8a]"></a>UsartSendByte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UsartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartSendByte &rArr; UsartSendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
</UL>

<P><STRONG><a name="[8b]"></a>UsartSendBytes</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, uart1n_a31g12x.o(i.UsartSendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsartSendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendByte
</UL>

<P><STRONG><a name="[8c]"></a>UsartSendStr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UsartSendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartSendStr &rArr; UsartSendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendBytes
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[8d]"></a>Usartn10InitPort</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.Usartn10InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usartn10InitPort &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[8e]"></a>Usartn11InitPort</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.Usartn11InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usartn11InitPort &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[8f]"></a>Usartn13InitPort</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.Usartn13InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usartn13InitPort &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[90]"></a>WaitTick</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, proc.o(i.WaitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = WaitTick &rArr; wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rtn
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[81]"></a>_UartSendByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart_a31g12x.o(i._UartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBytes
</UL>

<P><STRONG><a name="[44]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; proc &rArr; WaitTick &rArr; wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Port
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[92]"></a>proc</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, proc.o(i.proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = proc &rArr; WaitTick &rArr; wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn13InitPort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn11InitPort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usartn10InitPort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitBuff
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendStr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInitBuff
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1InitPort
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTick
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSendAdc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>uart_set_divisors</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, a31g12x_uartn.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_Init
</UL>

<P><STRONG><a name="[78]"></a>usart_set_divisors</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, a31g12x_usart1n.o(i.usart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[91]"></a>wait_rtn</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, proc.o(i.wait_rtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wait_rtn &rArr; AdcGetData &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendByte
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGetData
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTick
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[88]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart1n_a31g12x.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[87]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart1n_a31g12x.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
