<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\KEIL\out\FreeRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\KEIL\out\FreeRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Oct 28 11:14:14 2020
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
proc &rArr; InitSensirion &rArr; SGP30_Init &rArr; sgp30_probe &rArr; sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[1e]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[f]">EINT0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[10]">EINT1_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[11]">EINT2_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[12]">EINT3_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[2c]">GetRemoteCB</a> from peri.o(i.GetRemoteCB) referenced from peri.o(i.InitPeri)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[16]">I2C0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1a]">I2C1_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[25]">I2C2_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[c]">LVI_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_a31g12x.o(i.SystemInit) referenced from startup_a31g12x.o(.text)
 <LI><a href="#[13]">TIMER10_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[14]">TIMER11_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[15]">TIMER12_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[21]">TIMER13_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[22]">TIMER14_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[23]">TIMER15_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[24]">TIMER16_Handler</a> from ir_nec_hal.o(i.TIMER16_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1b]">TIMER20_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1c]">TIMER21_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[19]">TIMER30_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1f]">UART0_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[20]">UART1_Handler</a> from uart_a31g12x.o(i.UART1_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[17]">USART10_Handler</a> from uart1n_a31g12x.o(i.USART10_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[1d]">USART11_Handler</a> from uart1n_a31g12x.o(i.USART11_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[26]">USART12_Handler</a> from uart1n_a31g12x.o(i.USART12_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[27]">USART13_Handler</a> from uart1n_a31g12x.o(i.USART13_Handler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[e]">WDT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[18]">WT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[d]">WUT_Handler</a> from startup_a31g12x.o(.text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[30]">__main</a> from __main.o(!!!main) referenced from startup_a31g12x.o(.text)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2a]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[2e]">proc</a> from proc.o(i.proc) referenced from task_main.o(i.task_main)
 <LI><a href="#[2f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[2d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[9]">vPortSVCHandler</a> from port.o(i.vPortSVCHandler) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[a]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_a31g12x.o(RESET)
 <LI><a href="#[b]">xPortSysTickHandler</a> from main.o(i.xPortSysTickHandler) referenced from startup_a31g12x.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>

<P><STRONG><a name="[35]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[110]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[111]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[112]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[113]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[114]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[116]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[120]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[121]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; task_main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[105]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[106]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[108]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[a]"></a>xPortPendSVHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[44]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[45]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g12x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EINT0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EINT1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER20_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER30_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WUT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_a31g12x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteCB
</UL>

<P><STRONG><a name="[54]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[55]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[48]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[36]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[4a]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[4b]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[4c]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_bytes_to_uint32_t
</UL>

<P><STRONG><a name="[12d]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_disp_digit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTmrUs
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_divisors
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSHT3x
</UL>

<P><STRONG><a name="[50]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[4f]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSPS30
</UL>

<P><STRONG><a name="[134]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSHT3x
</UL>

<P><STRONG><a name="[135]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[136]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[47]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[137]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[138]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[139]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>DelayUs</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, peri.o(i.DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
</UL>

<P><STRONG><a name="[5c]"></a>DispFnd</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, disp.o(i.DispFnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DispFnd &rArr; MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_disp_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_disp_gas
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_disp_dust
</UL>

<P><STRONG><a name="[67]"></a>EInt_MaskDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g12x_intc.o(i.EInt_MaskDisable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMERn
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_ClearValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, a31g12x_pcu.o(i.GPIO_ClearValue))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_off
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_off
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_clk_off
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_SetValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, a31g12x_pcu.o(i.GPIO_SetValue))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_on
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_clk_on
</UL>

<P><STRONG><a name="[f2]"></a>GetI2c</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sensirion_i2c_sg.o(i.GetI2c))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read
</UL>

<P><STRONG><a name="[2c]"></a>GetRemoteCB</STRONG> (Thumb, 54 bytes, Stack size 120 bytes, peri.o(i.GetRemoteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GetRemoteCB &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peri.o(i.InitPeri)
</UL>
<P><STRONG><a name="[60]"></a>GetTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, proc.o(i.GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorIdle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisp
</UL>

<P><STRONG><a name="[62]"></a>I2C0_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, i2c_a31g12x.o(i.I2C0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_Init &rArr; I2Cn_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
</UL>

<P><STRONG><a name="[66]"></a>I2Cn_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, a31g12x_i2cn_sg.o(i.I2Cn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2Cn_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_RstEachPeri2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[6a]"></a>I2Cn_IntCmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, a31g12x_i2cn_sg.o(i.I2Cn_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>

<P><STRONG><a name="[70]"></a>I2Cn_MWait</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, a31g12x_i2cn_sg.o(i.I2Cn_MWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2Cn_MWait
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>

<P><STRONG><a name="[6e]"></a>I2Cn_MasterReceiveData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, a31g12x_i2cn_sg.o(i.I2Cn_MasterReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read
</UL>

<P><STRONG><a name="[6f]"></a>I2Cn_MasterTransferData</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, a31g12x_i2cn_sg.o(i.I2Cn_MasterTransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_getNum
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_IntCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransmitData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterReceiveData
</UL>

<P><STRONG><a name="[73]"></a>I2Cn_MasterTransmitData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, a31g12x_i2cn_sg.o(i.I2Cn_MasterTransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write
</UL>

<P><STRONG><a name="[71]"></a>I2Cn_getNum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, a31g12x_i2cn_sg.o(i.I2Cn_getNum))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransferData
</UL>

<P><STRONG><a name="[74]"></a>InitDisp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, disp.o(i.InitDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitDisp &rArr; MC2102Init &rArr; MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[76]"></a>InitIrNec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ir_nec.o(i.InitIrNec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitIrNec &rArr; cbIR_TimerInit &rArr; Init_TIMERn &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_TimerInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIR
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPeri
</UL>

<P><STRONG><a name="[79]"></a>InitMon</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mon.o(i.InitMon))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InitMon &rArr; UsartSendStr &rArr; USTSend &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitPort
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitBuff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[7d]"></a>InitPeri</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peri.o(i.InitPeri))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitPeri &rArr; InitIrNec &rArr; cbIR_TimerInit &rArr; Init_TIMERn &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIrNec
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTmrUs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[7f]"></a>InitSensirion</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensirion.o(i.InitSensirion))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InitSensirion &rArr; SGP30_Init &rArr; sgp30_probe &rArr; sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[7e]"></a>InitTmrUs</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, peri.o(i.InitTmrUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTmrUs &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPeri
</UL>

<P><STRONG><a name="[84]"></a>Init_Clock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.Init_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Clock &rArr; SCUCG_SetMonClk
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetMonClk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkoPin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkoCtrl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetClkDiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_EnClkSrc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_ChangeSysClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>Init_Port</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.Init_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Port
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetPeriClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>IrNecProc</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ir_nec.o(i.IrNecProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IrNecProc &rArr; ResetIR
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_RisingEdge
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_FallingEdge
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIR
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_Handler
</UL>

<P><STRONG><a name="[92]"></a>MC2102CMD</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mc2102.o(i.MC2102CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_output
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDataA
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102SetGrid
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102SetAddr
</UL>

<P><STRONG><a name="[75]"></a>MC2102Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mc2102.o(i.MC2102Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MC2102Init &rArr; MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102InitIO
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102SetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisp
</UL>

<P><STRONG><a name="[97]"></a>MC2102InitIO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102InitIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC2102InitIO &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_on
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_clk_on
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Init
</UL>

<P><STRONG><a name="[9b]"></a>MC2102SetAddr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mc2102.o(i.MC2102SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDataA
</UL>

<P><STRONG><a name="[98]"></a>MC2102SetBuf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mc2102.o(i.MC2102SetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102SetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Init
</UL>

<P><STRONG><a name="[9c]"></a>MC2102SetGrid</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mc2102.o(i.MC2102SetGrid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MC2102SetGrid &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_Reset
</UL>

<P><STRONG><a name="[95]"></a>MC2102Write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mc2102.o(i.MC2102Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC2102Write &rArr; MC2102_dio_on
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_on
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_clk_on
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_clk_off
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102dly
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDimm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDataA
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>

<P><STRONG><a name="[5e]"></a>MC2102WriteData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc2102.o(i.MC2102WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDataA
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFnd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisp
</UL>

<P><STRONG><a name="[a1]"></a>MC2102WriteDataA</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mc2102.o(i.MC2102WriteDataA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_on
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102SetAddr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteData
</UL>

<P><STRONG><a name="[a2]"></a>MC2102WriteDimm</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mc2102.o(i.MC2102WriteDimm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC2102WriteDimm &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_stb_off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_output
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_Reset
</UL>

<P><STRONG><a name="[a0]"></a>MC2102_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mc2102.o(i.MC2102_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MC2102_Reset &rArr; MC2102SetGrid &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102dly
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDimm
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102SetGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteData
</UL>

<P><STRONG><a name="[9e]"></a>MC2102_clk_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_clk_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_clk_off
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>

<P><STRONG><a name="[99]"></a>MC2102_clk_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_clk_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_clk_on
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102InitIO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>

<P><STRONG><a name="[9d]"></a>MC2102_dio_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_dio_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_dio_off
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>

<P><STRONG><a name="[9a]"></a>MC2102_dio_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_dio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_dio_on
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102InitIO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>

<P><STRONG><a name="[93]"></a>MC2102_dio_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_dio_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDimm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>

<P><STRONG><a name="[94]"></a>MC2102_stb_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_stb_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_stb_off
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDimm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>

<P><STRONG><a name="[96]"></a>MC2102_stb_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc2012_hal.o(i.MC2102_stb_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC2102_stb_on
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102InitIO
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDimm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102WriteDataA
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102CMD
</UL>

<P><STRONG><a name="[9f]"></a>MC2102dly</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc2102.o(i.MC2102dly))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_Reset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102Write
</UL>

<P><STRONG><a name="[63]"></a>PCU_ConfigureFunction</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, a31g12x_pcu.o(i.PCU_ConfigureFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitPort
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_TimerInit
</UL>

<P><STRONG><a name="[65]"></a>PCU_ConfigurePullupdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, a31g12x_pcu.o(i.PCU_ConfigurePullupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCU_ConfigurePullupdown
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitPort
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_TimerInit
</UL>

<P><STRONG><a name="[64]"></a>PCU_SetDirection</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, a31g12x_pcu.o(i.PCU_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCU_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInitPort
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102_dio_output
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC2102InitIO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_TimerInit
</UL>

<P><STRONG><a name="[d6]"></a>ProcMon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mon.o(i.ProcMon))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[a5]"></a>ProcSensirion</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sensirion.o(i.ProcSensirion))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ProcSensirion &rArr; ProcSensorSHT3x &rArr; sht3x_measure_blocking_read &rArr; sht3x_read &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSPS30
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSHT3x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSGP30
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
</UL>

<P><STRONG><a name="[a6]"></a>ProcSensorIdle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensirion.o(i.ProcSensorIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcSensorIdle &rArr; GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensirion
</UL>

<P><STRONG><a name="[a8]"></a>ProcSensorSGP30</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sensirion.o(i.ProcSensorSGP30))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProcSensorSGP30 &rArr; sgp30_measure_iaq_blocking_read &rArr; sgp30_read_iaq &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq_blocking_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_disp_gas
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensirion
</UL>

<P><STRONG><a name="[a7]"></a>ProcSensorSHT3x</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sensirion.o(i.ProcSensorSHT3x))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ProcSensorSHT3x &rArr; sht3x_measure_blocking_read &rArr; sht3x_read &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure_blocking_read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensirion
</UL>

<P><STRONG><a name="[a9]"></a>ProcSensorSPS30</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sensirion.o(i.ProcSensorSPS30))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProcSensorSPS30 &rArr; sps30_read_measurement &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_measurement
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_disp_dust
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensirion
</UL>

<P><STRONG><a name="[78]"></a>ResetIR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ir_nec.o(i.ResetIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetIR
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_FallingEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIrNec
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrNecProc
</UL>

<P><STRONG><a name="[86]"></a>SCUCG_ChangeSysClk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_ChangeSysClk))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[85]"></a>SCUCG_EnClkSrc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, a31g12x_scucg.o(i.SCUCG_EnClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCUCG_EnClkSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[68]"></a>SCUCG_RstEachPeri2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_RstEachPeri2))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_Init
</UL>

<P><STRONG><a name="[87]"></a>SCUCG_SetClkDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[8a]"></a>SCUCG_SetClkoCtrl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkoCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[89]"></a>SCUCG_SetClkoPin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetClkoPin))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[bc]"></a>SCUCG_SetEachPeriClk1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetEachPeriClk1))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Init
</UL>

<P><STRONG><a name="[c8]"></a>SCUCG_SetEachPeriClk2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetEachPeriClk2))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[88]"></a>SCUCG_SetMonClk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, a31g12x_scucg.o(i.SCUCG_SetMonClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCUCG_SetMonClk
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
</UL>

<P><STRONG><a name="[8c]"></a>SCUCG_SetPeriClk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g12x_scucg.o(i.SCUCG_SetPeriClk))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Port
</UL>

<P><STRONG><a name="[81]"></a>SGP30_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sensirion.o(i.SGP30_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SGP30_Init &rArr; sgp30_probe &rArr; sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_probe
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw_blocking_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_iaq_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_get_serial_id
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_get_feature_set_version
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
</UL>

<P><STRONG><a name="[80]"></a>SHT3x_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sensirion.o(i.SHT3x_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SHT3x_Init &rArr; sht3x_probe &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_probe
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
</UL>

<P><STRONG><a name="[82]"></a>SPS30_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sensirion.o(i.SPS30_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SPS30_Init &rArr; sps30_read_firmware_version &rArr; sensirion_i2c_read_cmd &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_start_measurement
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_firmware_version
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_probe
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_get_serial
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_a31g12x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>TIMER16_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ir_nec_hal.o(i.TIMER16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER16_Handler &rArr; IrNecProc &rArr; ResetIR
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrNecProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIMER1n_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_timer1n.o(i.TIMER1n_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMERn
</UL>

<P><STRONG><a name="[83]"></a>TIMER1n_Init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, a31g12x_timer1n.o(i.TIMER1n_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk1
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTmrUs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMERn
</UL>

<P><STRONG><a name="[8e]"></a>TIMER1n_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, a31g12x_timer1n.o(i.TIMER1n_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMERn
</UL>

<P><STRONG><a name="[20]"></a>UART1_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart_a31g12x.o(i.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_Handler &rArr; UART_IntReceive &rArr; UARTn_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>UART_IntReceive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uart_a31g12x.o(i.UART_IntReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_IntReceive &rArr; UARTn_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[bd]"></a>UART_IntTransmit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart_a31g12x.o(i.UART_IntTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_IntTransmit &rArr; UARTn_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_Send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_IntConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTn_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[c1]"></a>UARTn_CheckBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g12x_uartn.o(i.UARTn_CheckBusy))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
</UL>

<P><STRONG><a name="[c0]"></a>UARTn_IntConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, a31g12x_uartn.o(i.UARTn_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
</UL>

<P><STRONG><a name="[bf]"></a>UARTn_Receive</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, a31g12x_uartn.o(i.UARTn_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTn_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
</UL>

<P><STRONG><a name="[c2]"></a>UARTn_Send</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, a31g12x_uartn.o(i.UARTn_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTn_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
</UL>

<P><STRONG><a name="[17]"></a>USART10_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART10_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART11_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART11_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART12_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART12_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USART13_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1n_a31g12x.o(i.USART13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART13_Handler &rArr; USART1n_Handler &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>USART1n_CheckBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_CheckBusy))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
</UL>

<P><STRONG><a name="[ca]"></a>USART1n_ClearStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[d3]"></a>USART1n_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[c4]"></a>USART1n_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[c3]"></a>USART1n_Handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.USART1n_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART1n_Handler &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_GetStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART13_Handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART12_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART11_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_Handler
</UL>

<P><STRONG><a name="[c7]"></a>USART1n_Init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, a31g12x_usart1n.o(i.USART1n_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1n_Init &rArr; usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_SetEachPeriClk2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUCG_RstEachPeri2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_divisors
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[cd]"></a>USART1n_IntConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USTSend
</UL>

<P><STRONG><a name="[ce]"></a>USART1n_Receive</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, a31g12x_usart1n.o(i.USART1n_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1n_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntReceive
</UL>

<P><STRONG><a name="[cb]"></a>USART1n_Send</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, a31g12x_usart1n.o(i.USART1n_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
</UL>

<P><STRONG><a name="[d0]"></a>USART1n_UART_Mode_ConfigStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g12x_usart1n.o(i.USART1n_UART_Mode_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[cc]"></a>USTSend</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uart1n_a31g12x.o(i.USTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USTSend &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UST_IntTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendStr
</UL>

<P><STRONG><a name="[c5]"></a>UST_IntReceive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart1n_a31g12x.o(i.UST_IntReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UST_IntReceive &rArr; USART1n_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[c6]"></a>UST_IntTransmit</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uart1n_a31g12x.o(i.UST_IntTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Send
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USTSend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Handler
</UL>

<P><STRONG><a name="[7b]"></a>UsartInitBuff</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, uart1n_a31g12x.o(i.UsartInitBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UsartInitBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMon
</UL>

<P><STRONG><a name="[7a]"></a>UsartInitPort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UsartInitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsartInitPort &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMon
</UL>

<P><STRONG><a name="[7c]"></a>UsartOpen</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, uart1n_a31g12x.o(i.UsartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsartOpen &rArr; USART1n_Init &rArr; usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_UART_Mode_ConfigStructInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_IntConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMon
</UL>

<P><STRONG><a name="[5f]"></a>UsartSendStr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart1n_a31g12x.o(i.UsartSendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UsartSendStr &rArr; USTSend &rArr; UST_IntTransmit &rArr; USART1n_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USTSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemoteCB
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMon
</UL>

<P><STRONG><a name="[4d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[90]"></a>cbIR_FallingEdge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_nec_hal.o(i.cbIR_FallingEdge))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrNecProc
</UL>

<P><STRONG><a name="[91]"></a>cbIR_RisingEdge</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_nec_hal.o(i.cbIR_RisingEdge))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrNecProc
</UL>

<P><STRONG><a name="[77]"></a>cbIR_TimerInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ir_nec_hal.o(i.cbIR_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cbIR_TimerInit &rArr; Init_TIMERn &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_SetDirection
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigurePullupdown
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCU_ConfigureFunction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIMERn
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIrNec
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; task_main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Port
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Clock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e]"></a>proc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, proc.o(i.proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = proc &rArr; InitSensirion &rArr; SGP30_Init &rArr; sgp30_probe &rArr; sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensirion
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMon
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensirion
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPeri
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMon
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_main.o(i.task_main)
</UL>
<P><STRONG><a name="[e3]"></a>pvPortMalloc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[e2]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5d]"></a>seg_disp_digit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, disp.o(i.seg_disp_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = seg_disp_digit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_disp_off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFnd
</UL>

<P><STRONG><a name="[e6]"></a>seg_disp_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, disp.o(i.seg_disp_off))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_disp_digit
</UL>

<P><STRONG><a name="[e7]"></a>sensirion_bytes_to_float</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sensirion_common.o(i.sensirion_bytes_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensirion_bytes_to_float &rArr; sensirion_bytes_to_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_bytes_to_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_measurement
</UL>

<P><STRONG><a name="[e8]"></a>sensirion_bytes_to_uint32_t</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensirion_common.o(i.sensirion_bytes_to_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensirion_bytes_to_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_bytes_to_float
</UL>

<P><STRONG><a name="[ea]"></a>sensirion_common_check_crc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sensirion_common.o(i.sensirion_common_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensirion_common_check_crc &rArr; sensirion_common_generate_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_common_generate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words_as_bytes
</UL>

<P><STRONG><a name="[eb]"></a>sensirion_common_generate_crc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sensirion_common.o(i.sensirion_common_generate_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensirion_common_generate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_fill_cmd_send_buf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_common_check_crc
</UL>

<P><STRONG><a name="[ec]"></a>sensirion_fill_cmd_send_buf</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, sensirion_common.o(i.sensirion_fill_cmd_send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sensirion_fill_cmd_send_buf &rArr; sensirion_common_generate_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_common_generate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd_with_args
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>

<P><STRONG><a name="[ed]"></a>sensirion_i2c_delayed_read_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sensirion_common.o(i.sensirion_i2c_delayed_read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_fill_cmd_send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_probe
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_get_serial_id
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_get_feature_set_version
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_cmd
</UL>

<P><STRONG><a name="[f1]"></a>sensirion_i2c_read</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, sensirion_i2c_sg.o(i.sensirion_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterReceiveData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words_as_bytes
</UL>

<P><STRONG><a name="[f3]"></a>sensirion_i2c_read_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sensirion_common.o(i.sensirion_i2c_read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sensirion_i2c_read_cmd &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_firmware_version
</UL>

<P><STRONG><a name="[f0]"></a>sensirion_i2c_read_words</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sensirion_common.o(i.sensirion_i2c_read_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words_as_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_read_raw
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_read_iaq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>

<P><STRONG><a name="[f4]"></a>sensirion_i2c_read_words_as_bytes</STRONG> (Thumb, 84 bytes, Stack size 104 bytes, sensirion_common.o(i.sensirion_i2c_read_words_as_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_common_check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_measurement
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_get_serial
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words
</UL>

<P><STRONG><a name="[ee]"></a>sensirion_i2c_write</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, sensirion_i2c_sg.o(i.sensirion_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_MasterTransmitData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd_with_args
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>

<P><STRONG><a name="[f5]"></a>sensirion_i2c_write_cmd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sensirion_common.o(i.sensirion_i2c_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_fill_cmd_send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_read_measurement
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_get_serial
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_iaq_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_wake_up
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq
</UL>

<P><STRONG><a name="[f6]"></a>sensirion_i2c_write_cmd_with_args</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, sensirion_common.o(i.sensirion_i2c_write_cmd_with_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sensirion_i2c_write_cmd_with_args &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_fill_cmd_send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_start_measurement
</UL>

<P><STRONG><a name="[ef]"></a>sensirion_sleep_usec</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sensirion_i2c_sg.o(i.sensirion_sleep_usec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sensirion_sleep_usec &rArr; DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_start_measurement
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure_blocking_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw_blocking_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq_blocking_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_iaq_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_wake_up
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>

<P><STRONG><a name="[b0]"></a>set_disp_dust</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, disp.o(i.set_disp_dust))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_disp_dust &rArr; DispFnd &rArr; MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSPS30
</UL>

<P><STRONG><a name="[ab]"></a>set_disp_gas</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, disp.o(i.set_disp_gas))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_disp_gas &rArr; DispFnd &rArr; MC2102WriteData &rArr; MC2102WriteDataA &rArr; MC2102SetAddr &rArr; MC2102CMD &rArr; MC2102_dio_output &rArr; PCU_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSGP30
</UL>

<P><STRONG><a name="[b3]"></a>sgp30_get_feature_set_version</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sgp30.o(i.sgp30_get_feature_set_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_check_featureset
</UL>

<P><STRONG><a name="[b4]"></a>sgp30_get_serial_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sgp30.o(i.sgp30_get_serial_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sgp30_get_serial_id &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[b6]"></a>sgp30_iaq_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sgp30.o(i.sgp30_iaq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sgp30_iaq_init &rArr; sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_probe
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[f8]"></a>sgp30_measure_iaq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sgp30.o(i.sgp30_measure_iaq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sgp30_measure_iaq &rArr; sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq_blocking_read
</UL>

<P><STRONG><a name="[aa]"></a>sgp30_measure_iaq_blocking_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sgp30.o(i.sgp30_measure_iaq_blocking_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sgp30_measure_iaq_blocking_read &rArr; sgp30_read_iaq &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_read_iaq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSGP30
</UL>

<P><STRONG><a name="[fa]"></a>sgp30_measure_raw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sgp30.o(i.sgp30_measure_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sgp30_measure_raw &rArr; sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw_blocking_read
</UL>

<P><STRONG><a name="[b5]"></a>sgp30_measure_raw_blocking_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sgp30.o(i.sgp30_measure_raw_blocking_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sgp30_measure_raw_blocking_read &rArr; sgp30_read_raw &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_read_raw
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[b1]"></a>sgp30_probe</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sgp30.o(i.sgp30_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sgp30_probe &rArr; sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_iaq_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_check_featureset
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[f9]"></a>sgp30_read_iaq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sgp30.o(i.sgp30_read_iaq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sgp30_read_iaq &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_iaq_blocking_read
</UL>

<P><STRONG><a name="[fb]"></a>sgp30_read_raw</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sgp30.o(i.sgp30_read_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sgp30_read_raw &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_measure_raw_blocking_read
</UL>

<P><STRONG><a name="[fc]"></a>sht3x_measure</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sht3x.o(i.sht3x_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sht3x_measure &rArr; sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure_blocking_read
</UL>

<P><STRONG><a name="[ac]"></a>sht3x_measure_blocking_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sht3x.o(i.sht3x_measure_blocking_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sht3x_measure_blocking_read &rArr; sht3x_read &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSHT3x
</UL>

<P><STRONG><a name="[b7]"></a>sht3x_probe</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sht3x.o(i.sht3x_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sht3x_probe &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_delayed_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_Init
</UL>

<P><STRONG><a name="[fd]"></a>sht3x_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sht3x.o(i.sht3x_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sht3x_read &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_measure_blocking_read
</UL>

<P><STRONG><a name="[b2]"></a>sleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, proc.o(i.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[ba]"></a>sps30_get_serial</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sps30.o(i.sps30_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sps30_get_serial &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words_as_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_probe
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
</UL>

<P><STRONG><a name="[b8]"></a>sps30_probe</STRONG> (Thumb, 18 bytes, Stack size 40 bytes, sps30.o(i.sps30_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sps30_probe &rArr; sps30_get_serial &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_get_serial
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
</UL>

<P><STRONG><a name="[b9]"></a>sps30_read_firmware_version</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sps30.o(i.sps30_read_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sps30_read_firmware_version &rArr; sensirion_i2c_read_cmd &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
</UL>

<P><STRONG><a name="[ae]"></a>sps30_read_measurement</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, sps30.o(i.sps30_read_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sps30_read_measurement &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_read_words_as_bytes
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_bytes_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSensorSPS30
</UL>

<P><STRONG><a name="[bb]"></a>sps30_start_measurement</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sps30.o(i.sps30_start_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sps30_start_measurement &rArr; sensirion_i2c_write_cmd_with_args &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd_with_args
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPS30_Init
</UL>

<P><STRONG><a name="[ff]"></a>sps30_wake_up</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sps30.o(i.sps30_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sps30_wake_up &rArr; sensirion_i2c_write_cmd &rArr; sensirion_i2c_write &rArr; I2Cn_MasterTransmitData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_sleep_usec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensirion_i2c_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sps30_probe
</UL>

<P><STRONG><a name="[d5]"></a>task_main</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task_main.o(i.task_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = task_main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>usart_set_divisors</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, a31g12x_usart1n.o(i.usart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1n_Init
</UL>

<P><STRONG><a name="[d9]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[de]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[e1]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[db]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[da]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[dd]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[df]"></a>vPortExitCritical</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[102]"></a>vPortFree</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9]"></a>vPortSVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.vPortSVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d7]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[fe]"></a>vTaskDelay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[101]"></a>vTaskStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[e4]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[42]"></a>vTaskSwitchContext</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[103]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g12x.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>xTaskCreate</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[61]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[107]"></a>xTaskIncrementTick</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[e5]"></a>xTaskResumeAll</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_i2cn_sg.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_IntCmd
</UL>

<P><STRONG><a name="[6d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a31g12x_i2cn_sg.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_IntCmd
</UL>

<P><STRONG><a name="[6c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a31g12x_i2cn_sg.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cn_IntCmd
</UL>

<P><STRONG><a name="[d2]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart1n_a31g12x.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[d1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart1n_a31g12x.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartOpen
</UL>

<P><STRONG><a name="[d8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[dc]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2f]"></a>prvIdleTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[e0]"></a>prvInitialiseNewTask</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[109]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2d]"></a>prvTaskExitError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[8d]"></a>Init_TIMERn</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ir_nec_hal.o(i.Init_TIMERn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_TIMERn &rArr; TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EInt_MaskDisable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbIR_TimerInit
</UL>

<P><STRONG><a name="[f7]"></a>sgp30_check_featureset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sgp30.o(i.sgp30_check_featureset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sgp30_check_featureset &rArr; sgp30_get_feature_set_version &rArr; sensirion_i2c_delayed_read_cmd &rArr; sensirion_i2c_read_words &rArr; sensirion_i2c_read_words_as_bytes &rArr; sensirion_i2c_read &rArr; I2Cn_MasterReceiveData &rArr; I2Cn_MasterTransferData &rArr; I2Cn_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_get_feature_set_version
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgp30_probe
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
